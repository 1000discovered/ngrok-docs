"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[46745],{25467:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(51163),r=(a(59496),a(49613));const l={toc:[{value:"Backend Variables",id:"backend",level:4},{value:"Basic Auth Variables",id:"basic-auth",level:4},{value:"Circuit Breaker Variables",id:"circuit-breaker",level:4},{value:"Compression Variables",id:"compression",level:4},{value:"Connection Variables",id:"conn",level:4},{value:"Geo IP Variables",id:"ngrok-geo",level:4},{value:"HTTP Variables",id:"http",level:4},{value:"IP Restrictions Variables",id:"ip-restrictions",level:4},{value:"Mutual TLS",id:"mutual-tls",level:4},{value:"ngrok Variables",id:"ngrok-variables",level:4},{value:"OAuth Variables",id:"oauth",level:4},{value:"OpenID Connect Variables",id:"openid-connect",level:4},{value:"SAML Variables",id:"saml",level:4},{value:"TLS Termination Variables",id:"tls",level:4},{value:"Webhook Verification Variables",id:"webhook-verification",level:4}]},i="wrapper";function o(e){let{components:t,...a}=e;return(0,r.kt)(i,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"ngrok makes variables available for ",(0,r.kt)("a",{parentName:"p",href:"#variable-interpolation"},"interpolation into\nheaders"),"."),(0,r.kt)("p",null,"Some variables will only be populated with values if you have configured the\ncorresponding module for your endpoint, otherwise they will be empty. For\nexample, the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"${.basic_auth.username}")," is only available if you have\nenabled the basic auth module on your endpoint."),(0,r.kt)("h4",{id:"backend"},"Backend Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.backend.connection_reused}")),(0,r.kt)("td",{parentName:"tr",align:null},"True if ngrok reused a TCP connection to transmit the HTTP request to the upstream service.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.backend.dial_duration}")),(0,r.kt)("td",{parentName:"tr",align:null},"The time to establish a connection from ngrok to the agent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.backend.id}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the ngrok ID of the backend that serviced this request. This is empty if the endpoint is not handled by an Edge.")))),(0,r.kt)("h4",{id:"basic-auth"},"Basic Auth Variables"),(0,r.kt)("p",null,"These variables are only populated when using the Basic Auth module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.basic_auth.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"allow")," if the request successfully authenticated via the Basic Auth module, ",(0,r.kt)("inlineCode",{parentName:"td"},"block")," otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.basic_auth.username}")),(0,r.kt)("td",{parentName:"tr",align:null},"If the request successfully authenticated via the Basic Auth module, this is the username that authenticated.")))),(0,r.kt)("h4",{id:"circuit-breaker"},"Circuit Breaker Variables"),(0,r.kt)("p",null,"These variables are only available when using the Circuit Breaker module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.circuit_breaker.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the HTTP request was sent to the upstream service. ",(0,r.kt)("inlineCode",{parentName:"td"},"allow")," if the breaker was closed, ",(0,r.kt)("inlineCode",{parentName:"td"},"block")," if the breaker was open, ",(0,r.kt)("inlineCode",{parentName:"td"},"allow_while_open")," if the request was allowed while the breaker is open.")))),(0,r.kt)("h4",{id:"compression"},"Compression Variables"),(0,r.kt)("p",null,"These variables are only populated when using the Compression module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.compression.algorithm}")),(0,r.kt)("td",{parentName:"tr",align:null},"The compression algorithm used to encode responses from the endpoint. Either ",(0,r.kt)("inlineCode",{parentName:"td"},"gzip"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"deflate"),", or ",(0,r.kt)("inlineCode",{parentName:"td"},"none"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.compression.bytes_saved}")),(0,r.kt)("td",{parentName:"tr",align:null},"The difference between the size of the raw response and the size of the response as compressed by ngrok.")))),(0,r.kt)("h4",{id:"conn"},"Connection Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.bytes_in}")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of bytes arriving at an endpoint from the frontend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.bytes_out}")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of bytes leaving an endpoint to the frontend.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.client_ip}")),(0,r.kt)("td",{parentName:"tr",align:null},"The source IP of the TCP connection to the ngrok edge.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.duration}")),(0,r.kt)("td",{parentName:"tr",align:null},"The total duration (in seconds) of the TCP connection between the ngrok endpoint and the agent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.end_ts}")),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamp when the TCP connection to the ngrok edge is closed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The ngrok ID for this TCP connection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.server_ip}")),(0,r.kt)("td",{parentName:"tr",align:null},"The IP address of the server that received the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.server_name}")),(0,r.kt)("td",{parentName:"tr",align:null},"The hostname associated with this connection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.server_port}")),(0,r.kt)("td",{parentName:"tr",align:null},"The port that the connection for this request came in on.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.conn.start_ts}")),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamp when the TCP connection to the ngrok edge is established.")))),(0,r.kt)("h4",{id:"ngrok-geo"},"Geo IP Variables"),(0,r.kt)("p",null,"The source of this data is subject to change. It is currently provided by ",(0,r.kt)("a",{parentName:"p",href:"https://www.maxmind.com/en/home"},"MaxMind GeoIP"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.geo.country_code}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the two-letter ISO country code based on the client IP.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.geo.lat_long_radius_km}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the radius in kilometers around the latitude and longitude where the client IP is likely to originate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.geo.latitude}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the approximate latitude based on the client IP.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.geo.longitude}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the approximate longitude based on the client IP.")))),(0,r.kt)("h4",{id:"http"},"HTTP Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request_id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The unique ngrok-assigned ID of this request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.method}")),(0,r.kt)("td",{parentName:"tr",align:null},"The request method, normalized to uppercase.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.url.host}")),(0,r.kt)("td",{parentName:"tr",align:null},"The host component of the request URL.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.url.path}")),(0,r.kt)("td",{parentName:"tr",align:null},"The path component of the request URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.url.query}")),(0,r.kt)("td",{parentName:"tr",align:null},"The query string component of the request URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.url.raw}")),(0,r.kt)("td",{parentName:"tr",align:null},"The full URL of the request including scheme, host, path, and query string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.url.scheme}")),(0,r.kt)("td",{parentName:"tr",align:null},"The scheme component of the request URL.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.user_agent}")),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the User-Agent header in the request received by ngrok edge.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.request.version}")),(0,r.kt)("td",{parentName:"tr",align:null},"The HTTP version used in the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.http.response.status_code}")),(0,r.kt)("td",{parentName:"tr",align:null},"The status code of the response returned by the ngrok edge.")))),(0,r.kt)("h4",{id:"ip-restrictions"},"IP Restrictions Variables"),(0,r.kt)("p",null,"These variables are only populated when using the IP Restrictions module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ip_policy.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"allow")," if IP Policy module permitted the request to the upstream service, ",(0,r.kt)("inlineCode",{parentName:"td"},"block")," otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ip_policy.matching_rule}")),(0,r.kt)("td",{parentName:"tr",align:null},"The rule that triggered an IP Policy match on the endpoint.")))),(0,r.kt)("h4",{id:"mutual-tls"},"Mutual TLS"),(0,r.kt)("p",null,"These variables are only populated when using the Mutual TLS module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.tls.client_cert.serial_number}")),(0,r.kt)("td",{parentName:"tr",align:null},"The serial number of the client's leaf TLS certificate in the Mutual TLS handshake.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.tls.client_cert.subject.cn}")),(0,r.kt)("td",{parentName:"tr",align:null},"The subject common name of the client's leaf TLS certificate in the Mutual TLS handshake.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.tls.client_cert.subject}")),(0,r.kt)("td",{parentName:"tr",align:null},"The subject of the client's leaf TLS certificate in the Mutual TLS handshake")))),(0,r.kt)("h4",{id:"ngrok-variables"},"ngrok Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.client_ip}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the original client IP of the request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.request_id}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the unique request ID generated by ngrok")))),(0,r.kt)("h4",{id:"oauth"},"OAuth Variables"),(0,r.kt)("p",null,"These variables are only populated when using the OAuth module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.app_client_id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The is the ID of the OAuth2 application used to handle this request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},"'allow' if the OAuth module permitted the request to the upstream service, 'block' otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.email}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the email address of the user that was authenticated.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The authenticated user's ID returned by the OAuth provider.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.name}")),(0,r.kt)("td",{parentName:"tr",align:null},"The authenticated user's name returned by the OAuth provider.")))),(0,r.kt)("h4",{id:"openid-connect"},"OpenID Connect Variables"),(0,r.kt)("p",null,"These variables are only populated when using the OpenID Connect module. These\nvariables are identical to the ",(0,r.kt)("a",{parentName:"p",href:"#oauth"},"OAuth Variables"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.app_client_id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The is the ID of the OAuth application used to handle this request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"allow")," if the OpenID Connect module permitted the request to the upstream service, ",(0,r.kt)("inlineCode",{parentName:"td"},"block")," otherwise.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.email}")),(0,r.kt)("td",{parentName:"tr",align:null},"This is the email address of the user that was authenticated.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.id}")),(0,r.kt)("td",{parentName:"tr",align:null},"The authenticated user's ID returned by the OpenID Connect provider.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.oauth.user.name}")),(0,r.kt)("td",{parentName:"tr",align:null},"The authenticated user's name returned by the OpenID Connect provider.")))),(0,r.kt)("h4",{id:"saml"},"SAML Variables"),(0,r.kt)("p",null,"These variables are only populated when using the SAML module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.ngrok.saml.subject}")),(0,r.kt)("td",{parentName:"tr",align:null},"The SAML subject of the the authenticated user.")))),(0,r.kt)("h4",{id:"tls"},"TLS Termination Variables"),(0,r.kt)("p",null,"These variables are only populated on requests to HTTPS endpoints."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.tls.cipher_suite}")),(0,r.kt)("td",{parentName:"tr",align:null},"The cipher suite selected during the TLS handshake.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.tls.version}")),(0,r.kt)("td",{parentName:"tr",align:null},"The version of the TLS protocol used between the client and the ngrok edge.")))),(0,r.kt)("h4",{id:"webhook-verification"},"Webhook Verification Variables"),(0,r.kt)("p",null,"These variables are only populated when using the Webhook Verification module."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"${.webhook_validation.decision}")),(0,r.kt)("td",{parentName:"tr",align:null},"'allow' if the Webhook Verification module permitted the request to the upstream service, 'block' otherwise.")))))}o.isMDXComponent=!0},56819:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var n=a(51163),r=(a(59496),a(49613)),l=a(25467);const i={},o="Response Headers",d={unversionedId:"cloud-edge/modules/response-headers",id:"cloud-edge/modules/response-headers",title:"Response Headers",description:"---",source:"@site/docs/cloud-edge/modules/response-headers.mdx",sourceDirName:"cloud-edge/modules",slug:"/cloud-edge/modules/response-headers",permalink:"/docs/cloud-edge/modules/response-headers",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/cloud-edge/modules/response-headers.mdx",tags:[],version:"current",lastUpdatedBy:"Alan Shreve",lastUpdatedAt:1693163057,formattedLastUpdatedAt:"Aug 27, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Request Headers",permalink:"/docs/cloud-edge/modules/request-headers"},next:{title:"SAML",permalink:"/docs/cloud-edge/modules/saml"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Agent CLI",id:"agent-cli",level:3},{value:"Agent Configuration File",id:"agent-configuration-file",level:3},{value:"SSH",id:"ssh",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Rust SDK",id:"rust-sdk",level:3},{value:"Kubernetes Ingress Controller",id:"kubernetes-ingress-controller",level:3},{value:"Edges",id:"edges",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Ordering",id:"ordering",level:3},{value:"Variable Interpolation",id:"variable-interpolation",level:3},{value:"Multiple Header Values",id:"multiple-header-values",level:3},{value:"Replacing Header Values",id:"replacing-header-values",level:3},{value:"Case Sensitivity",id:"case-sensitivity",level:3},{value:"Reference",id:"reference",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Upstream Headers",id:"upstream-headers",level:3},{value:"Errors",id:"errors",level:3},{value:"Events",id:"events",level:3},{value:"Limits",id:"limits",level:3},{value:"Variables",id:"variables",level:3},{value:"Try it out",id:"try-it-out",level:2}],u={toc:p},h="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"response-headers"},"Response Headers"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This module adds and removes headers from the HTTP response before it is\nreturned to the client. This is useful for stripping internal headers or\nenforcing the use of security headers without modifying upstream applications."),(0,r.kt)("p",null,"You may ",(0,r.kt)("a",{parentName:"p",href:"#variable-interpolation"},"interpolate variables into header values")," to make them dynamic."),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("h3",{id:"agent-cli"},"Agent CLI"),(0,r.kt)("h6",{id:""}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 \\\n  --response-header-add='content-security-policy: self' \\\n  --response-header-add='dial-duration: ${.backend.dial_duration}' \\\n  --response-header-remove='internal-trace-id'\n")),(0,r.kt)("h3",{id:"agent-configuration-file"},"Agent Configuration File"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'tunnels:\n  example:\n    proto: http\n    addr: 80\n    response_headers:\n      add:\n        - "content-security-policy: self"\n        - "dial-duration: ${.backend.dial_duration}"\n      remove:\n        - "internal-trace-id"\n')),(0,r.kt)("h3",{id:"ssh"},"SSH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -R 443:localhost:80 connect.ngrok-agent.com http \\\n  --response-header-add='content-security-policy: self' \\\n  --response-header-add='dial-duration: ${.backend.dial_duration}' \\\n  --response-header-remove='internal-trace-id'\n")),(0,r.kt)("h3",{id:"go-sdk"},"Go SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "net"\n\n    "golang.ngrok.com/ngrok"\n    "golang.ngrok.com/ngrok/config"\n)\n\nfunc listenResponseHeaders(ctx context.Context) net.Listener {\n    listener, _ := ngrok.Listen(ctx,\n        config.HTTPEndpoint(\n            config.WithResponseHeader("content-security-policy", "self"),\n            config.WithResponseHeader("dial-duration", "${.backend.dial_duration}"),\n            config.WithRemoveResponseHeader("internal-trace-id"),\n        ),\n        ngrok.WithAuthtokenFromEnv(),\n    )\n\n    return listener\n}\n')),(0,r.kt)("h3",{id:"rust-sdk"},"Rust SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use ngrok::prelude::*;\n\nasync fn start_tunnel() -> anyhow::Result<impl Tunnel> {\n    let sess = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?;\n\n    let tun = sess\n        .http_endpoint()\n        .response_header("content-security-policy", "self")\n        .response_header("dial-duration", "${.backend.dial_duration}")\n        .remove_response_header("internal-trace-id")\n        .listen()\n        .await?;\n\n    println!("Listening on URL: {:?}", tun.url());\n\n    Ok(tun)\n}\n')),(0,r.kt)("h3",{id:"kubernetes-ingress-controller"},"Kubernetes Ingress Controller"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: NgrokModuleSet\napiVersion: ingress.k8s.ngrok.com/v1alpha1\nmetadata:\n  name: ngrok-module-set\nmodules:\n  headers:\n    response:\n      add:\n        content-security-policy: "self"\n        dial-duration: "${.backend.dial_duration}"\n      remove:\n        - "internal-trace-id"\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    k8s.ngrok.com/modules: ngrok-module-set\nspec:\n  ingressClassName: ngrok\n  rules:\n    - host: your-domain.ngrok.app\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: example-service\n                port:\n                  number: 80\n')),(0,r.kt)("h3",{id:"edges"},"Edges"),(0,r.kt)("p",null,"Response Headers is a supported HTTP Edge Route module."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/https-edge-route-response-headers-module/"},"Response Headers Edge Module API\nResource"))),(0,r.kt)("h2",{id:"behavior"},"Behavior"),(0,r.kt)("h3",{id:"ordering"},"Ordering"),(0,r.kt)("p",null,"Response header changes made by other modules can be overridden by this module\nbecause this module is executed immediately before the HTTP header is written\nto the client."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/events/reference/#http-request-complete"},"http_request_complete.v0")," events\ninclude any header changes made by this module because those events are\npublished after this module executes."),(0,r.kt)("h3",{id:"variable-interpolation"},"Variable Interpolation"),(0,r.kt)("p",null,"You may interpolate variables into header values. Variables are interpolated\ninto headers with JSONPath expressions surrounded by the ",(0,r.kt)("inlineCode",{parentName:"p"},"${}")," syntax."),(0,r.kt)("p",null,"For example to return to the duration spent dialing the upstream application,\nyou may construct a header value like so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 --response-header-add 'dial-duration: ${.backend.dial_duration}'\n")),(0,r.kt)("p",null,"If you are specifying variable interpolation from the command line, make sure\nto use single quotes for the command line argument otherwise it is likely that\nthe shell will interpret your variable definition."),(0,r.kt)("p",null,"Consult the ",(0,r.kt)("a",{parentName:"p",href:"#variables"},"Variables Reference")," for the available variables."),(0,r.kt)("h3",{id:"multiple-header-values"},"Multiple Header Values"),(0,r.kt)("p",null,"HTTP headers may include the same header multiple times. You may add a header\nmultiple times with different values and it will be added multiple times. For\nexample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ngrok http 80 --response-header-add "foo: bar" --response-header-add "foo: baz"\n')),(0,r.kt)("p",null,"will result in a header with multiple values set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2 200\nfoo: bar\nfoo: baz\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There is a bug which currently causes the above behavior to not be correct.\nOnly the last header to be used when specifying multiple headers. This behavior\nwill be fixed to match what is documented above.")),(0,r.kt)("p",null,"If you remove a header that has multiple values, all values will be removed."),(0,r.kt)("h3",{id:"replacing-header-values"},"Replacing Header Values"),(0,r.kt)("p",null,"If you add a header that is already present in the HTTP response, it will add\nanother header. For example, if you run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ngrok http 80 --response-header-add "foo: new-value"\n')),(0,r.kt)("p",null,"And the HTTP response from the upstream server was:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2\nfoo: original-value\n")),(0,r.kt)("p",null,"The client will receive the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2\nfoo: original-value\nfoo: new-value\n")),(0,r.kt)("p",null,"If you wish to replace a header, you can combine header removal and addition to\nachieve that effect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ngrok http 80 --response-header-remove "foo" --response-header-add "foo: new-value"\n')),(0,r.kt)("p",null,"This will cause the HTTP response in this case to become:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2\nfoo: new-value\n")),(0,r.kt)("h3",{id:"case-sensitivity"},"Case Sensitivity"),(0,r.kt)("p",null,"When adding headers, ngrok normalizes all header keys to a lower case\nreprsentation per the http/2 RFC. See ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2"},"RFC\n7540"),"."),(0,r.kt)("p",null,"When removing headers, ngrok will remove any headers that match with a\ncase-insensitive comparison."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Added Headers")),(0,r.kt)("td",{parentName:"tr",align:null},"A list of of header names to header values. Max 5.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Removed Headers")),(0,r.kt)("td",{parentName:"tr",align:null},"A list of of header names to remove. Max 5.")))),(0,r.kt)("h3",{id:"upstream-headers"},"Upstream Headers"),(0,r.kt)("p",null,"This module does not add any upstream headers."),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"This module does not return any errors."),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("p",null,"This module does not populate any fields in events."),(0,r.kt)("h3",{id:"limits"},"Limits"),(0,r.kt)("p",null,"This module is available on all plans."),(0,r.kt)("p",null,"If you are not subscribed to a paid account, it is not permitted to remove the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ngrok-agent-ip")," header. This header is part of ngrok's abuse deterrance\nmechanism."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)(l.ZP,{mdxType:"HttpHeaderTemplates"}),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"First let's create a directory with an example file to serve."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir test-response-headers\ncd test-response-headers\necho "response headers test" > t.txt\n')),(0,r.kt)("p",null,"Next, start ngrok and specify that we want to add a header."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ngrok http file://`pwd` --response-header-add="foo: bar"\n')),(0,r.kt)("p",null,"In a separate terminal, curl that endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -I https://your-domain.ngrok.app/t.txt\n")),(0,r.kt)("p",null,"You can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"foo: bar")," header in the response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2 200\naccept-ranges: bytes\ncontent-type: text/plain; charset=utf-8\ndate: Sat, 29 Jul 2023 14:58:28 GMT\nfoo: bar\nlast-modified: Sat, 29 Jul 2023 14:50:23 GMT\nngrok-agent-ips: 1.2.3.4\nngrok-trace-id: 85874fc497b4b0f0d849688dfe4df83c\ncontent-length: 22\n")),(0,r.kt)("p",null,"Now, let's try removing a header. We'll remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"last-modified")," header we\nsaw in the previous response. Stop your previous instance of ngrok with ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl+C"),"\nand then restart ngrok with a new command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ngrok http file://`pwd` --response-header-remove="last-modified"\n')),(0,r.kt)("p",null,"In a separate terminal, make another request to it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -I https://your-domain.ngrok.app/t.txt\n")),(0,r.kt)("p",null,"You can see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"last-modified")," header has been removed from the response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http"},"HTTP/2 200\naccept-ranges: bytes\ncontent-type: text/plain; charset=utf-8\ndate: Sat, 29 Jul 2023 15:01:47 GMT\nngrok-agent-ips: 1.2.3.4\nngrok-trace-id: de01adaa98a96eef167e96485051d786\ncontent-length: 22\n")))}m.isMDXComponent=!0}}]);