"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[53818],{4864:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>v,default:()=>R,frontMatter:()=>b,metadata:()=>L,toc:()=>C});var a=n(51163),l=(n(59496),n(49613));const r={toc:[{value:"Example Request",id:"example-request",level:4}]},i="wrapper";function s(e){let{components:t,...n}=e;return(0,l.kt)(i,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"example-request"},"Example Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n-X PUT \\\n-H "Authorization: Bearer {API_KEY}" \\\n-H "Content-Type: application/json" \\\n-H "Ngrok-Version: 2" \\\n-d \'{"enabled":true,"terminate_at":"edge","min_version":"1.3"}\' \\\nhttps://api.ngrok.com/edges/tls/edgtls_2TMGJs0yCf2PDJVPhi1bFHDpLt5/tls_termination\n')))}s.isMDXComponent=!0;const d={toc:[{value:"Example Response",id:"example-response",level:4}]},o="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(o,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"example-response"},"Example Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "enabled": true,\n    "terminate_at": "edge",\n    "min_version": "1.3"\n}\n')))}m.isMDXComponent=!0;const p={toc:[{value:"Example Request",id:"example-request",level:4}]},u="wrapper";function k(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"example-request"},"Example Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n-X GET \\\n-H "Authorization: Bearer {API_KEY}" \\\n-H "Ngrok-Version: 2" \\\nhttps://api.ngrok.com/edges/tls/edgtls_2TMGJs0yCf2PDJVPhi1bFHDpLt5/tls_termination\n')))}k.isMDXComponent=!0;const g={toc:[{value:"Example Response",id:"example-response",level:4}]},c="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"example-response"},"Example Response"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "enabled": true,\n    "terminate_at": "edge",\n    "min_version": "1.3"\n}\n')))}h.isMDXComponent=!0;const N={toc:[{value:"Example Request",id:"example-request",level:4}]},f="wrapper";function T(e){let{components:t,...n}=e;return(0,l.kt)(f,(0,a.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"example-request"},"Example Request"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n-X DELETE \\\n-H "Authorization: Bearer {API_KEY}" \\\n-H "Ngrok-Version: 2" \\\nhttps://api.ngrok.com/edges/tls/edgtls_2TMGJs0yCf2PDJVPhi1bFHDpLt5/tls_termination\n')))}T.isMDXComponent=!0;const b={},v="TLS Edge TLS Termination Module",L={unversionedId:"api/resources/tls-edge-tls-termination-module",id:"api/resources/tls-edge-tls-termination-module",title:"TLS Edge TLS Termination Module",description:"---",source:"@site/docs/api/resources/tls-edge-tls-termination-module.mdx",sourceDirName:"api/resources",slug:"/api/resources/tls-edge-tls-termination-module",permalink:"/docs/api/resources/tls-edge-tls-termination-module",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/api/resources/tls-edge-tls-termination-module.mdx",tags:[],version:"current",lastUpdatedBy:"Russ Savage",lastUpdatedAt:1691862991,formattedLastUpdatedAt:"Aug 12, 2023",frontMatter:{},sidebar:"docs",previous:{title:"TLS Edge Mutual TLS Module",permalink:"/docs/api/resources/tls-edge-mutual-tls-module"},next:{title:"User Management",permalink:"/docs/user-management/"}},y={},C=[{value:"Replace TLS Edge TLS Termination Module",id:"replace-tls-edge-tls-termination-module",level:2},{value:"Request",id:"request",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Response",id:"response",level:3},{value:"Fields",id:"fields",level:4},{value:"Get TLS Edge TLS Termination Module",id:"get-tls-edge-tls-termination-module",level:2},{value:"Request",id:"request-1",level:3},{value:"Response",id:"response-1",level:3},{value:"Fields",id:"fields-1",level:4},{value:"Delete TLS Edge TLS Termination Module",id:"delete-tls-edge-tls-termination-module",level:2},{value:"Request",id:"request-2",level:3},{value:"Response",id:"response-2",level:3}],S={toc:C},E="wrapper";function R(e){let{components:t,...n}=e;return(0,l.kt)(E,(0,a.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"tls-edge-tls-termination-module"},"TLS Edge TLS Termination Module"),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"replace-tls-edge-tls-termination-module"},"Replace TLS Edge TLS Termination Module"),(0,l.kt)("h3",{id:"request"},"Request"),(0,l.kt)("p",null,"PUT /edges/tls/{id}/tls_termination"),(0,l.kt)(s,{mdxType:"TLSEdgeTLSTerminationModuleReplaceRequest"}),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enabled")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the module will be applied to traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," to disable. default ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," if unspecified")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"edge")," if the ngrok edge should terminate TLS traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," if TLS traffic should be passed through to the upstream ngrok agent / application server for termination. if ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," is chosen, most other modules will be disallowed because they rely on the ngrok edge being able to access the underlying traffic.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"min_version")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The minimum TLS version used for termination and advertised to the client during the TLS handshake. if unspecified, ngrok will choose an industry-safe default. This value must be null if ",(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")," is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream"),".")))),(0,l.kt)("h3",{id:"response"},"Response"),(0,l.kt)("p",null,"Returns a 200 response on success"),(0,l.kt)(m,{mdxType:"TLSEdgeTLSTerminationModuleReplaceResponse"}),(0,l.kt)("h4",{id:"fields"},"Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enabled")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the module will be applied to traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," to disable. default ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," if unspecified")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"edge")," if the ngrok edge should terminate TLS traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," if TLS traffic should be passed through to the upstream ngrok agent / application server for termination. if ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," is chosen, most other modules will be disallowed because they rely on the ngrok edge being able to access the underlying traffic.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"min_version")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The minimum TLS version used for termination and advertised to the client during the TLS handshake. if unspecified, ngrok will choose an industry-safe default. This value must be null if ",(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")," is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream"),".")))),(0,l.kt)("h2",{id:"get-tls-edge-tls-termination-module"},"Get TLS Edge TLS Termination Module"),(0,l.kt)("h3",{id:"request-1"},"Request"),(0,l.kt)("p",null,"GET /edges/tls/{id}/tls_termination"),(0,l.kt)(k,{mdxType:"TLSEdgeTLSTerminationModuleGetRequest"}),(0,l.kt)("h3",{id:"response-1"},"Response"),(0,l.kt)("p",null,"Returns a 200 response on success"),(0,l.kt)(h,{mdxType:"TLSEdgeTLSTerminationModuleGetResponse"}),(0,l.kt)("h4",{id:"fields-1"},"Fields"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,l.kt)("th",{parentName:"tr",align:null},"\xa0"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"enabled")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," if the module will be applied to traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," to disable. default ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," if unspecified")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"edge")," if the ngrok edge should terminate TLS traffic, ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," if TLS traffic should be passed through to the upstream ngrok agent / application server for termination. if ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream")," is chosen, most other modules will be disallowed because they rely on the ngrok edge being able to access the underlying traffic.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"min_version")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The minimum TLS version used for termination and advertised to the client during the TLS handshake. if unspecified, ngrok will choose an industry-safe default. This value must be null if ",(0,l.kt)("inlineCode",{parentName:"td"},"terminate_at")," is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"upstream"),".")))),(0,l.kt)("h2",{id:"delete-tls-edge-tls-termination-module"},"Delete TLS Edge TLS Termination Module"),(0,l.kt)("h3",{id:"request-2"},"Request"),(0,l.kt)("p",null,"DELETE /edges/tls/{id}/tls_termination"),(0,l.kt)(T,{mdxType:"TLSEdgeTLSTerminationModuleDeleteRequest"}),(0,l.kt)("h3",{id:"response-2"},"Response"),(0,l.kt)("p",null,"Returns a 204 response with no body on success"))}R.isMDXComponent=!0}}]);