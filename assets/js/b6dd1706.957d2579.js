"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[96582],{45411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(51163),a=(n(59496),n(49613));const i={},o="Circuit Breaker",l={unversionedId:"cloud-edge/modules/circuit-breaker",id:"cloud-edge/modules/circuit-breaker",title:"Circuit Breaker",description:"---",source:"@site/docs/cloud-edge/modules/circuit-breaker.md",sourceDirName:"cloud-edge/modules",slug:"/cloud-edge/modules/circuit-breaker",permalink:"/docs/cloud-edge/modules/circuit-breaker",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/cloud-edge/modules/circuit-breaker.md",tags:[],version:"current",lastUpdatedBy:"Alan Shreve",lastUpdatedAt:1692208556,formattedLastUpdatedAt:"Aug 16, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Modules",permalink:"/docs/cloud-edge/modules/"},next:{title:"Compression",permalink:"/docs/cloud-edge/modules/compression"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Agent CLI",id:"agent-cli",level:3},{value:"Agent Configuration File",id:"agent-configuration-file",level:3},{value:"SSH",id:"ssh",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Rust SDK",id:"rust-sdk",level:3},{value:"Kubernetes Ingress Controller",id:"kubernetes-ingress-controller",level:3},{value:"Edges",id:"edges",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Reference",id:"reference",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Upstream Headers",id:"upstream-headers",level:3},{value:"Errors",id:"errors",level:3},{value:"Events",id:"events",level:3},{value:"Limits",id:"limits",level:3},{value:"Try it out",id:"try-it-out",level:2},{value:"<code>example.go</code>",id:"examplego",level:5}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"circuit-breaker"},"Circuit Breaker"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The Circuit Breaker module protects your upstream applications by rejecting\ntraffic to your endpoints when the upstreams become overloaded, allowing them\ntime to recover to a steady operational state."),(0,a.kt)("p",null,"When your upstream application's 5XX responses exceed a percentage threshold of\nthe total, the circuit breaker 'opens' or 'breaks' the circuit. When the\ncircuit is open, the ngrok edge rejects requests to your endpoint with a ",(0,a.kt)("a",{parentName:"p",href:"#errors"},"503\nerror response")," and does not forward them through to your upstream\nserver."),(0,a.kt)("p",null,"When the circuit is open, ngrok will allow a small set of requests through to\nthe upstream server to determine whether it has recovered. If those requests\nare successful, it will close the circuit permitting traffic to flow to your\nupstream application once again."),(0,a.kt)("h2",{id:"quickstart"},"Quickstart"),(0,a.kt)("h3",{id:"agent-cli"},"Agent CLI"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 --circuit-breaker 0.5\n")),(0,a.kt)("h3",{id:"agent-configuration-file"},"Agent Configuration File"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"tunnels:\n  example:\n    proto: http\n    addr: 80\n    circuit_breaker: 0.5\n")),(0,a.kt)("h3",{id:"ssh"},"SSH"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -R 443:localhost:80 connect.ngrok-agent.com http --circuit-breaker 0.5\n")),(0,a.kt)("h3",{id:"go-sdk"},"Go SDK"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "net"\n\n    "golang.ngrok.com/ngrok"\n    "golang.ngrok.com/ngrok/config"\n)\n\nfunc listenCircuitBreaker(ctx context.Context) net.Listener {\n    listener, _ := ngrok.Listen(ctx,\n        config.HTTPEndpoint(\n            config.WithCircuitBreaker(0.5),\n        ),\n        ngrok.WithAuthtokenFromEnv(),\n    )\n\n    return listener\n}\n')),(0,a.kt)("h3",{id:"rust-sdk"},"Rust SDK"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use ngrok::prelude::*;\n\nasync fn start_tunnel() -> anyhow::Result<impl Tunnel> {\n    let sess = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?;\n\n    let tun = sess\n        .http_endpoint()\n        .circuit_breaker(0.5)\n        .listen()\n        .await?;\n\n    println!("Listening on URL: {:?}", tun.url());\n\n    Ok(tun)\n}\n')),(0,a.kt)("h3",{id:"kubernetes-ingress-controller"},"Kubernetes Ingress Controller"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: NgrokModuleSet\napiVersion: ingress.k8s.ngrok.com/v1alpha1\nmetadata:\n  name: ngrok-module-set\nmodules:\n  circuit_breaker:\n    errorThresholdPercentage: "0.50"\n    trippedDuration: 10s\n    rollingWindow: 10s\n    numBuckets: 10\n    volumeThreshold: 10\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    k8s.ngrok.com/modules: ngrok-module-set\nspec:\n  ingressClassName: ngrok\n  rules:\n    - host: your-domain.ngrok.app\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: example-service\n                port:\n                  number: 80\n')),(0,a.kt)("h3",{id:"edges"},"Edges"),(0,a.kt)("p",null,"Circuit Breaker is a supported Edge module which can be applied to routes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/resources/https-edge-route-circuit-breaker-module/"},"Circuit Breaker Edge Module API Resource"))),(0,a.kt)("h2",{id:"behavior"},"Behavior"),(0,a.kt)("p",null,"The Circuit Breaker module is an implementation of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Netflix/Hystrix/wiki/How-it-Works"},"Netflix's Hystrix circuit\nbreaker specification"),"."),(0,a.kt)("p",null,"If the upstream server responds with more than the threshold percentage of\nrequests with 5XX status codes, the circuit breaker preemptively reject all\nsubsequent requests at the ngrok edge with a 503 until the upstream server's\nerror rate drops below the threshold percentage."),(0,a.kt)("p",null,"Circuit breaker state is tracked on each ngrok edge server individually. There\nare many ngrok edge servers which means that your upstream server may observe\nrequests even after you would expect the circuit breaker to open. All of\nngrok's edge servers will eventually open their circuits to protect an failing\nupstream application but the behavior you observe may not exactly match the\nparameters you've set because circuit breaker state is tracked individually on\neach of ngrok's edge servers."),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"The Agent and Agent SDKs do not support configuration of some parameters of the\nCircuit Breaker."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Error Threshold")),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"The threshold percentage of upstream requests that must fail before the circuit is opened expressed a decimal value between 0 and 1. ngrok defines any HTTP response with a status code greater than or equal to 500 as an error response that counts toward the circuit breaker threshold.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Tripped Duration")),(0,a.kt)("td",{parentName:"tr",align:null},"10"),(0,a.kt)("td",{parentName:"tr",align:null},"The number of seconds to reject requests, once the circuit is opened, before rechecking if the circuit should again be closed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Rolling Window")),(0,a.kt)("td",{parentName:"tr",align:null},"10"),(0,a.kt)("td",{parentName:"tr",align:null},"The window of time we keep metrics for the circuit breaker, the error threshold only considers successes and errors that fall within this window.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Number of Buckets")),(0,a.kt)("td",{parentName:"tr",align:null},"10"),(0,a.kt)("td",{parentName:"tr",align:null},"The number of discrete time intervals the rolling window duration is divided into. Along with the rolling window duration, this defines the granularity at which requests expire out of the rolling window. Max 128.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},"Volume Threshold")),(0,a.kt)("td",{parentName:"tr",align:null},"20"),(0,a.kt)("td",{parentName:"tr",align:null},"The minimum number of requests required in a rolling window that will trip the circuit.")))),(0,a.kt)("h3",{id:"upstream-headers"},"Upstream Headers"),(0,a.kt)("p",null,"This module does not add any upstream headers."),(0,a.kt)("h3",{id:"errors"},"Errors"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Code"),(0,a.kt)("th",{parentName:"tr",align:null},"HTTP Status"),(0,a.kt)("th",{parentName:"tr",align:null},"Error"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/errors/err_ngrok_3202/"},"ERR_NGROK_3202")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"503")),(0,a.kt)("td",{parentName:"tr",align:null},"This error is returned if the circuit breaker is open because the upstream service is failing.")))),(0,a.kt)("h3",{id:"events"},"Events"),(0,a.kt)("p",null,"When the Circuit Breaker module is enabled, it populates the following fields in\n",(0,a.kt)("a",{parentName:"p",href:"/events/reference/#http-request-complete"},"http_request_complete.v0")," events."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Fields"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"circuit_breaker.decision"))))),(0,a.kt)("h3",{id:"limits"},"Limits"),(0,a.kt)("p",null,"This module is available on all plans."),(0,a.kt)("h2",{id:"try-it-out"},"Try it out"),(0,a.kt)("p",null,"This short Go program below that demonstrates Circuit Breaker behavior. Create\nthe file ",(0,a.kt)("inlineCode",{parentName:"p"},"example.go")," with the Go code below and then run the following commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'export NGROK_AUTHTOKEN="<your authtoken>"\ngo mod init example.com/ngrok-circuit-breaker\ngo get golang.ngrok.com/ngrok\ngo run example.go\n')),(0,a.kt)("h5",{id:"examplego"},(0,a.kt)("inlineCode",{parentName:"h5"},"example.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "net"\n    "net/http"\n    "net/url"\n    "os"\n\n    "golang.ngrok.com/ngrok"\n    "golang.ngrok.com/ngrok/config"\n)\n\nfunc main() {\n    l, err := ngrok.Listen(context.Background(),\n        config.HTTPEndpoint(\n            config.WithCircuitBreaker(0.1),\n        ),\n        ngrok.WithAuthtokenFromEnv(),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println("Running at", l.URL())\n    go makeRequests(l.URL())\n    http.Serve(l, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        if r.URL.Path == "/500" {\n            w.WriteHeader(500)\n            fmt.Fprintln(w, "Hello error!")\n        } else {\n            w.WriteHeader(200)\n            fmt.Fprintln(w, "Hello world!")\n        }\n    }))\n}\n\nfunc makeRequests(appURL string) {\n    // make sure we always dial the same IP addresss for testing purposes because\n    // circuit breaker state is applied on each ngrok edge server individually\n    u, _ := url.Parse(appURL)\n    addrs, err := net.LookupHost(u.Host)\n    if err != nil {\n        log.Fatal(err)\n    }\n    httpClient := http.Client{Transport: &http.Transport{\n        Dial: func(network, _ string) (net.Conn, error) {\n            return net.Dial(network, addrs[0]+":443")\n        },\n    }}\n\n    // make requests that return a 500 until the circuit opens\n    for {\n        resp, err := httpClient.Get(appURL + "/500")\n        if err != nil {\n            log.Fatal(err)\n        }\n        fmt.Printf("Status Code %d\\n", resp.StatusCode)\n        if resp.StatusCode == 503 {\n            fmt.Println("Circuit opened")\n            break\n        }\n    }\n\n    // make requests that will eventually return a 200 which will close the circuit\n    for {\n        resp, err := httpClient.Get(appURL)\n        if err != nil {\n            log.Fatal(err)\n        }\n        fmt.Printf("Status Code %d\\n", resp.StatusCode)\n        if resp.StatusCode != 503 {\n            fmt.Println("Circuit closed")\n            os.Exit(0)\n        }\n    }\n}\n')))}c.isMDXComponent=!0}}]);