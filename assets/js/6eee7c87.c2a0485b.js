"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[84438],{80487:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(51163),r=(n(59496),n(49613));const i={},l="Mutual TLS",o={unversionedId:"cloud-edge/modules/mutual-tls",id:"cloud-edge/modules/mutual-tls",title:"Mutual TLS",description:"---",source:"@site/docs/cloud-edge/modules/mutual-tls.md",sourceDirName:"cloud-edge/modules",slug:"/cloud-edge/modules/mutual-tls",permalink:"/docs/cloud-edge/modules/mutual-tls",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/cloud-edge/modules/mutual-tls.md",tags:[],version:"current",lastUpdatedBy:"Alan Shreve",lastUpdatedAt:1692208556,formattedLastUpdatedAt:"Aug 16, 2023",frontMatter:{},sidebar:"docs",previous:{title:"IP Restrictions",permalink:"/docs/cloud-edge/modules/ip-restrictions"},next:{title:"OAuth",permalink:"/docs/cloud-edge/modules/oauth"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Agent CLI",id:"agent-cli",level:3},{value:"Agent Configuration File",id:"agent-configuration-file",level:3},{value:"SSH",id:"ssh",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Rust SDK",id:"rust-sdk",level:3},{value:"Kubernetes Ingress Controller",id:"kubernetes-ingress-controller",level:3},{value:"Edges",id:"edges",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Multiple CAs",id:"multiple-cas",level:3},{value:"CA Basic Constraint",id:"ca-basic-constraint",level:3},{value:"Reference",id:"reference",level:2},{value:"Configuration",id:"configuration",level:3},{value:"<strong>Agent Configuration</strong>",id:"agent-configuration",level:6},{value:"<strong>Edge Configuration</strong>",id:"edge-configuration",level:6},{value:"Upstream Headers",id:"upstream-headers",level:3},{value:"Errors",id:"errors",level:3},{value:"Events",id:"events",level:3},{value:"Limits",id:"limits",level:3},{value:"Try it out",id:"try-it-out",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mutual-tls"},"Mutual TLS"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This module performs mutual TLS (mTLS) authentication when the ngrok edge terminates\nTLS on incoming connections to your HTTP endpoint. The client must present a\nvalid TLS certificate that is signed by one of the specified CAs or the\nconnection will be rejected."),(0,r.kt)("p",null,"ngrok injects ",(0,r.kt)("a",{parentName:"p",href:"#upstream-headers"},"headers")," into upstream HTTP requests with\ninformation about the client certificate presented."),(0,r.kt)("p",null,"Mutual TLS is supported on both HTTP and TLS endpoints."),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("h3",{id:"agent-cli"},"Agent CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 --mutual-tls-cas /path/to/cas.pem\n")),(0,r.kt)("h3",{id:"agent-configuration-file"},"Agent Configuration File"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'tunnels:\n  example:\n    proto: "http"\n    addr: 80\n    mutual_tls_cas: "/path/to/cas.pem"\n')),(0,r.kt)("h3",{id:"ssh"},"SSH"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Mutual TLS is not supported via SSH.")),(0,r.kt)("h3",{id:"go-sdk"},"Go SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "crypto/x509"\n    "encoding/pem"\n    "net"\n    "os"\n\n    "golang.ngrok.com/ngrok"\n    "golang.ngrok.com/ngrok/config"\n)\n\nfunc listenMutualTLS(ctx context.Context) net.Listener {\n    caBytes, _ := os.ReadFile("/path/to/cas.pem")\n    der, _ := pem.Decode(caBytes)\n    certs, _ := x509.ParseCertificates(der.Bytes)\n\n    listener, _ := ngrok.Listen(ctx,\n        config.HTTPEndpoint(\n            config.WithMutualTLSCA(certs...),\n        ),\n        ngrok.WithAuthtokenFromEnv(),\n    )\n\n    return listener\n}\n')),(0,r.kt)("h3",{id:"rust-sdk"},"Rust SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use ngrok::prelude::*;\n\nasync fn start_tunnel() -> anyhow::Result<impl Tunnel> {\n    let ca_cert: &[u8] = load_bytes!("/path/to/cas.pem");\n\n    let sess = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?;\n\n    let tun = sess\n        .http_endpoint()\n        .mutual_tlsca(ca_cert.into())\n        .listen()\n        .await?;\n\n    println!("Listening on URL: {:?}", tun.url());\n\n    Ok(tun)\n}\n')),(0,r.kt)("h3",{id:"kubernetes-ingress-controller"},"Kubernetes Ingress Controller"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Mutual TLS is not yet supported with the Kubernetes Ingress Controller.")),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ngrok/kubernetes-ingress-controller/issues/133"},"+1 the GitHub\nissue"),"\ntracking its implementation."),(0,r.kt)("h3",{id:"edges"},"Edges"),(0,r.kt)("p",null,"Mutual TLS is a supported Edge module. When the Mutual TLS module is configured\nvia an Edge, you must specify one or more references to Certificate Authority\nobjects."),(0,r.kt)("p",null,"The Mutual TLS Edge module is applied to the edge directly and not to any\nindividual route. This is because Mutual TLS is enforced before any HTTP\nprocessing can begin."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/https-edge-mutual-tls-module/"},"Mutual TLS Edge Module API Resource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/certificate-authorities/"},"Certificate Authority API Resource"))),(0,r.kt)("h2",{id:"behavior"},"Behavior"),(0,r.kt)("h3",{id:"multiple-cas"},"Multiple CAs"),(0,r.kt)("p",null,"You may specify multiple CAs to be used for mTLS authentication. A connection\nis considered authenticated if it presents a certificate signed by any of the\nspecified CAs. Agents allow you to specify multiple CAs by simply specifying a\nPEM file that contains multiple x509 CA certificates concatenated together. A\nfile like that might look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pem"},"-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n")),(0,r.kt)("h3",{id:"ca-basic-constraint"},"CA Basic Constraint"),(0,r.kt)("p",null,"x509 certificates contain a basic constraint attribute called ",(0,r.kt)("inlineCode",{parentName:"p"},"cA")," which\ndefines whether or not the certificate may be used as a CA."),(0,r.kt)("p",null,"ngrok will refuse to accept a certificate as an mTLS certificate authority\nunless this constraint is set to true."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.9"},"RFC 5280 4.2.1.9"),"."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("h6",{id:"agent-configuration"},(0,r.kt)("strong",{parentName:"h6"},"Agent Configuration")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Certificate Authorities")),(0,r.kt)("td",{parentName:"tr",align:null},"PEM-encoded certificate authorities. You may concatenate CAs to multiple together. A client certificate must be signed by at least one of the CAs.")))),(0,r.kt)("h6",{id:"edge-configuration"},(0,r.kt)("strong",{parentName:"h6"},"Edge Configuration")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Certificate Authority IDs")),(0,r.kt)("td",{parentName:"tr",align:null},"A set of certificates authorities. A client certificate must be signed by at least one of the configured CAs. See the ",(0,r.kt)("a",{parentName:"td",href:"/api/resources/https-edge-route-ip-restriction-module/"},"HTTPS Edge IP Restrictions Module API Resource")," for additional details. Max of 10.")))),(0,r.kt)("h3",{id:"upstream-headers"},"Upstream Headers"),(0,r.kt)("p",null,"This module adds headers to the HTTP request sent to your upstream server with\ndetails about the client certificate that was presented for the Mutual TLS\nhandshake."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Header Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ngrok-mtls-subject-cn")),(0,r.kt)("td",{parentName:"tr",align:null},"The client certificate subject common name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ngrok-mtls-subject-alt-name-dns")),(0,r.kt)("td",{parentName:"tr",align:null},"The client certificate's DNS subject alternative names")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ngrok-mtls-email-addresses")),(0,r.kt)("td",{parentName:"tr",align:null},"The client certificate's email subject alternative names")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ngrok-mtls-serial-number")),(0,r.kt)("td",{parentName:"tr",align:null},"The client certificate's serial number")))),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"If the client does not present any certificate or it does not present a valid\ncertificate signed by the CA, the TLS handshake will be aborted. Because the\nconnection is aborted during the TLS handshake, the client will not receive an\nHTTP error response or an ngrok error code."),(0,r.kt)("p",null,"Instead, the TLS connection aborts with a TLS error as defined by ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc5246#section-7.2"},"RFC\n5246"),". The most\ncommon alert code returned for a failed mutual TLS handshake is code 42\n(",(0,r.kt)("inlineCode",{parentName:"p"},"bad_certificate"),') which most TLS implementations will report with the error\nstring string "bad certificate".'),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("p",null,"When the mutual TLS module is enabled, it populates the following fields in\n",(0,r.kt)("a",{parentName:"p",href:"/events/reference/#http-request-complete"},"http_request_complete.v0")," events."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Fields"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tls.client_cert.serial_number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tls.client_cert.subject.cn"))))),(0,r.kt)("p",null,"No event data is captured when the module is enabled on TLS endpoints."),(0,r.kt)("h3",{id:"limits"},"Limits"),(0,r.kt)("p",null,"This module is available on the Enterprise plan."),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"This example assumes you have an x509 private key and certificate encoded as\nPEM files called ",(0,r.kt)("inlineCode",{parentName:"p"},"client-key.pem")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"client-cert.pem"),", respectively. The\ncertificate must be signed by one of the CA certificates you provided to the\nMutual TLS module."),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --client client-cert.pem --key client-key.pem https://yourapp.ngrok.app\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curl")," has a shortcut to pass a single file if the private key and certificate\nare concatenated together."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat client-cert.pem client-key.pem > client-cert-and-key.pem\ncurl --cert client-cert-and-key.pem https://yourapp.ngrok.app\n")))}p.isMDXComponent=!0}}]);