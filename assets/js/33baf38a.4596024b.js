"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[20970],{50261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(51163),r=(n(59496),n(49613));const o={},l="IP Restrictions",i={unversionedId:"cloud-edge/modules/ip-restrictions",id:"cloud-edge/modules/ip-restrictions",title:"IP Restrictions",description:"---",source:"@site/docs/cloud-edge/modules/ip-restrictions.md",sourceDirName:"cloud-edge/modules",slug:"/cloud-edge/modules/ip-restrictions",permalink:"/docs/cloud-edge/modules/ip-restrictions",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/cloud-edge/modules/ip-restrictions.md",tags:[],version:"current",lastUpdatedBy:"Alan Shreve",lastUpdatedAt:1692208556,formattedLastUpdatedAt:"Aug 16, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Compression",permalink:"/docs/cloud-edge/modules/compression"},next:{title:"Mutual TLS",permalink:"/docs/cloud-edge/modules/mutual-tls"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Agent CLI",id:"agent-cli",level:3},{value:"Agent Configuration File",id:"agent-configuration-file",level:3},{value:"SSH",id:"ssh",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Rust SDK",id:"rust-sdk",level:3},{value:"Kubernetes Ingress Controller",id:"kubernetes-ingress-controller",level:3},{value:"Edges",id:"edges",level:3},{value:"Behavior",id:"behavior",level:2},{value:"Rule Evaluation",id:"rule-evaluation",level:3},{value:"IPv6",id:"ipv6",level:3},{value:"Forwarded-For",id:"forwarded-for",level:3},{value:"Reference",id:"reference",level:2},{value:"Configuration",id:"configuration",level:3},{value:"<strong>Agent Configuration</strong>",id:"agent-configuration",level:6},{value:"<strong>Edge Configuration</strong>",id:"edge-configuration",level:6},{value:"Upstream Headers",id:"upstream-headers",level:3},{value:"Errors",id:"errors",level:3},{value:"HTTP",id:"http",level:4},{value:"TCP + TLS",id:"tcp--tls",level:4},{value:"Events",id:"events",level:3},{value:"Limits",id:"limits",level:3},{value:"Try it out",id:"try-it-out",level:2}],u={toc:d},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ip-restrictions"},"IP Restrictions"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"IP Restrictions allows you to allow or deny traffic based on the source IP of\nthe connection that was initiated to your ngrok endpoints. You configure the\nmodule by defining rules that apply allow or deny actions to IPv4 or IPv6 CIDR\nblocks."),(0,r.kt)("p",null,"A connection is allowed only if its source IP matches at least one rule with an\n'allow' action and does not match any rule with a 'deny' action."),(0,r.kt)("p",null,"The IP Restrictions module is supported on HTTP, TCP and TLS endpoints."),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("h3",{id:"agent-cli"},"Agent CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 --cidr-allow 110.0.0.0/8 --cidr-allow 220.12.0.0/16 --cidr-deny 110.2.3.4/32\n")),(0,r.kt)("h3",{id:"agent-configuration-file"},"Agent Configuration File"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"tunnels:\n  example:\n    proto: http\n    addr: 80\n    allow_cidrs: [110.0.0.0/8, 220.12.0.0/16]\n    deny_cidrs: [110.2.3.4/32]\n")),(0,r.kt)("h3",{id:"ssh"},"SSH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -R 443:localhost:80 connect.ngrok-agent.com http \\\n  --cidr-allow 110.0.0.0/8 \\\n  --cidr-allow 220.12.0.0/16 \\\n  --cidr-deny 110.2.3.4/32\n")),(0,r.kt)("h3",{id:"go-sdk"},"Go SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "net"\n\n    "golang.ngrok.com/ngrok"\n    "golang.ngrok.com/ngrok/config"\n)\n\nfunc listenIPRestrictions(ctx context.Context) net.Listener {\n    listener, _ := ngrok.Listen(ctx,\n        config.HTTPEndpoint(\n            config.WithAllowCIDRString("110.0.0.0/8", "220.12.0.0/16"),\n            config.WithDenyCIDRString("110.2.3.4/32"),\n        ),\n        ngrok.WithAuthtokenFromEnv(),\n    )\n    return listener\n}\n')),(0,r.kt)("h3",{id:"rust-sdk"},"Rust SDK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use ngrok::prelude::*;\n\nasync fn start_tunnel() -> anyhow::Result<impl Tunnel> {\n    let sess = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?;\n    let tun = sess\n        .http_endpoint()\n        .allow_cidr("110.0.0.0/8"),\n        .allow_cidr("220.12.0.0/16"),\n        .deny_cidr("110.2.3.4/32"),\n        .listen()\n        .await?;\n    println!("Listening on URL: {:?}", tun.url());\n    Ok(tun)\n}\n')),(0,r.kt)("h3",{id:"kubernetes-ingress-controller"},"Kubernetes Ingress Controller"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: IPPolicy\napiVersion: ingress.k8s.ngrok.com/v1alpha1\nmetadata:\n  name: policy-1\nspec:\n  description: "My Trusted IPs"\n  rules:\n    - action: "allow"\n      cidr: "110.0.0.0/8"\n    - action: "allow"\n      cidr: "220.12.0.0/16"\n    - action: "deny"\n      cidr: "110.2.3.4/32"\n---\nkind: NgrokModuleSet\napiVersion: ingress.k8s.ngrok.com/v1alpha1\nmetadata:\n  name: ngrok-module-set\nmodules:\n  ipRestriction:\n    policies:\n      - "policy-1" # Reference to the `ippolicy.ingress.k8s.ngrok.com` Custom Resource above\n      - "ipp_1234567890" # Reference to an IP Policy by its ngrok API ID\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    k8s.ngrok.com/modules: ngrok-module-set\nspec:\n  ingressClassName: ngrok\n  rules:\n    - host: your-domain.ngrok.app\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: example-service\n                port:\n                  number: 80\n')),(0,r.kt)("h3",{id:"edges"},"Edges"),(0,r.kt)("p",null,"IP Restrictions is a supported module for HTTPS, TLS and TCP edges.\nWhen using IP Restrictions via Edges, you specify a set of\nreferences to one or more IP Policy objects, each of which contains a list of\nIP Policy Rule objects."),(0,r.kt)("p",null,"IP Restrictions and the IP Policy and IP Policy Rule objects they reference can\nbe configured via the ngrok dashboard or API."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/https-edge-route-ip-restriction-module/"},"HTTPS Edge IP Restrictions Module API Resource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/tls-edge-ip-restriction-module/"},"TLS Edge IP Restrictions Module API Resource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/tcp-edge-ip-restriction-module/"},"TCP Edge IP Restrictions Module API Resource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/ip-policies/"},"IP Policy API Resource")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/resources/ip-policy-rules/"},"IP Policy Rule API Resource"))),(0,r.kt)("h2",{id:"behavior"},"Behavior"),(0,r.kt)("h3",{id:"rule-evaluation"},"Rule Evaluation"),(0,r.kt)("p",null,"A connection is allowed only if its source IP matches at least one rule with an\n'allow' action and does not match any rule with a 'deny' action."),(0,r.kt)("p",null,"When using Edges and the Kubernetes Ingress Controller, if the IP Restrictions\nmodule references multiple IP Policies, then the rules of all referenced IP\nPolicies are unioned together for evaluation."),(0,r.kt)("h3",{id:"ipv6"},"IPv6"),(0,r.kt)("p",null,"ngrok supports IPv6 addresses for all IP rules. You may use standard abbreviated\nnotations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'ngrok http --allow-cidr "::/0" --deny-cidr "2600:1f16:d83:1202::6e:2/128" 80\n')),(0,r.kt)("p",null,"Don't forget to create IPv6 rules. It's easy to test only with IPv4 and then\nsuddenly things don't work when your software starts using IPv6 because you've\nforgotten to create rules to allow traffic from IPv6 addresses."),(0,r.kt)("h3",{id:"forwarded-for"},"Forwarded-For"),(0,r.kt)("p",null,"The IP Restrictions always evaluates its rules against the layer 4 source IP of\na connection. HTTP headers like ",(0,r.kt)("inlineCode",{parentName:"p"},"forwarded-for")," are never consulted by this\nmodule."),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("h6",{id:"agent-configuration"},(0,r.kt)("strong",{parentName:"h6"},"Agent Configuration")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Allow CIDRs")),(0,r.kt)("td",{parentName:"tr",align:null},"A set of IPv4 and IPv6 CIDRs to allow.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Deny CIDRs")),(0,r.kt)("td",{parentName:"tr",align:null},"A set of IPv4 and IPv6 CIDRs to deny.")))),(0,r.kt)("h6",{id:"edge-configuration"},(0,r.kt)("strong",{parentName:"h6"},"Edge Configuration")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"IP Policy IDs")),(0,r.kt)("td",{parentName:"tr",align:null},"A set of IP policies that will be used to check if a source IP is allowed access. See the ",(0,r.kt)("a",{parentName:"td",href:"/api/resources/https-edge-route-ip-restriction-module/"},"HTTPS Edge IP Restrictions Module API Resource")," for additional details.")))),(0,r.kt)("h3",{id:"upstream-headers"},"Upstream Headers"),(0,r.kt)("p",null,"This module does not add any upstream headers."),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("h4",{id:"http"},"HTTP"),(0,r.kt)("p",null,"The following errors are returned on HTTP endpoints."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Code"),(0,r.kt)("th",{parentName:"tr",align:null},"HTTP Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Error"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/errors/err_ngrok_3205/"},"ERR_NGROK_3205")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"403")),(0,r.kt)("td",{parentName:"tr",align:null},"This error is returned if a connection is disallowed by this module.")))),(0,r.kt)("h4",{id:"tcp--tls"},"TCP + TLS"),(0,r.kt)("p",null,"For TCP and TLS endpoints, if a connection is disallowed by IP Restrictions\nthen the connection is closed because there is no standardized error reporting\nat these protocol layers."),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("p",null,"When the IP Restrictions module is enforced, it populates the following fields\nin both the\n",(0,r.kt)("a",{parentName:"p",href:"/events/reference/#http-request-complete"},"http_request_complete.v0")," and the\n",(0,r.kt)("a",{parentName:"p",href:"/events/reference/#tcp-connection-closed"},"tcp_connection_closed.v0")," events."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Fields"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ip_policy.decision"))))),(0,r.kt)("h3",{id:"limits"},"Limits"),(0,r.kt)("p",null,"This module is available on the Pro and Enterprise plans."),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"First, grab your IPv4 and IPv6 addresses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -4 icanhazip.com\ncurl -6 icanhazip.com\n")),(0,r.kt)("p",null,"Then run ngrok with IP Restrictions with the IPv4 and IPv6 addresses you got in the previous step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ngrok http 80 \\\n  --domain your-domain.ngrok.app \\\n  --allow-cidr 2600:8c00::a03c:91ee:fe69:9695/32 \\\n  --allow-cidr 78.227.75.230/32\n")),(0,r.kt)("p",null,"Then make requests to your ngrok domain using the ",(0,r.kt)("inlineCode",{parentName:"p"},"-4")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"-6")," flags to test both IPv4 and IPv6:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -4 https://your-domain.ngrok.app\ncurl -6 https://your-domain.ngrok.app\n")))}p.isMDXComponent=!0}}]);