"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[4052],{42986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(51163),a=(n(59496),n(49613));const i={title:"Rust"},o="Using ngrok with the ngrok-rust crate",s={unversionedId:"using-ngrok-with/rust",id:"using-ngrok-with/rust",title:"Rust",description:"---",source:"@site/docs/using-ngrok-with/rust.md",sourceDirName:"using-ngrok-with",slug:"/using-ngrok-with/rust",permalink:"/docs/using-ngrok-with/rust",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/using-ngrok-with/rust.md",tags:[],version:"current",lastUpdatedBy:"Russ Savage",lastUpdatedAt:1693002758,formattedLastUpdatedAt:"Aug 25, 2023",frontMatter:{title:"Rust"},sidebar:"docs",previous:{title:"RDP",permalink:"/docs/using-ngrok-with/rdp"},next:{title:"SMTP Mail Servers",permalink:"/docs/using-ngrok-with/smtp"}},l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Get started with ngrok-rust",id:"get-started-with-ngrok-rust",level:2},{value:"Add edge functionality to your app",id:"add-edge-functionality-to-your-app",level:2}],p={toc:u},k="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(k,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-ngrok-with-the-ngrok-rust-crate"},"Using ngrok with the ngrok-rust crate"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"ngrok-rust is an idiomatic Rust crate for embedding secure ingress directly into your Rust applications. If you\u2019ve used the ngrok agent before, you can think of ngrok-rust as the agent packaged as a Rust crate. ",(0,a.kt)("a",{parentName:"p",href:"http://github.com/ngrok/ngrok-rust"},"ngrok-rust is open source")," with ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/ngrok"},"API reference available on docs.rs"),"."),(0,a.kt)("p",null,"ngrok-rust lets developers serve Rust services on the internet in a single line of code without setting up low-level network primitives like IPs, certificates, load balancers, and even ports. Applications using ngrok-rust listen on ngrok\u2019s global ingress network using an incoming stream with tokio\u2019s ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncRead")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncWrite")," traits \u2014 compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"axium::Server::builder()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"hyper::Server::builder()"),". This makes it easy to add ngrok-rust into any application that uses axium or hyper \u2014 the most beloved Web Framework and HTTP implementations in Rust."),(0,a.kt)("p",null,"In this tutorial, you will build a Rust app with ingress access and security provided by ngrok."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": This tutorial assumes you have Rust already installed."),(0,a.kt)("h2",{id:"get-started-with-ngrok-rust"},"Get started with ngrok-rust"),(0,a.kt)("p",null,"Getting started with ngrok and the ngrok-rust crate is simple:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"To start, ",(0,a.kt)("a",{parentName:"p",href:"https://ngrok.com/signup"},"sign up for ngrok"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("a",{parentName:"p",href:"https://dashboard.ngrok.com"},"ngrok Dashboard"),", copy your Authtoken.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Launch a terminal and create a Rust application:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir hello-ngrok\ncd hello-ngrok\ncargo init\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the tokio, axum, and ngrok crates:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo add ngrok -F axum\ncargo add axum\ncargo add tokio -F rt-multi-thread -F macros\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Edit the main.rs file and add the following code:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:"showLineNumbers",showLineNumbers:!0},'use axum::{routing::get, Router};\nuse ngrok::prelude::*;\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    // build our application with a route\n    let app = Router::new().route("/", get(|| async { "Hello from ngrok-rust!" }));\n\n    // listen on localhost:8000\n    // axum::Server::bind(&"0.0.0.0:8000".parse().unwrap())\n    //  .serve(app.into_make_service())\n    //  .await?;\n    // Ok(())\n\n    // listen on ngrok ingress (i.e. https://myapp.ngrok.dev)\n    let listener = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?\n        .http_endpoint()\n        .listen()\n        .await?;\n    println!("Ingress URL: {:?}", listener.url());\n    axum::Server::builder(listener)\n        .serve(app.into_make_service())\n        .await?;\n    Ok(())\n}\n')))),(0,a.kt)("admonition",{title:"In this code:",type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Lines 16-22"),": create a listener object with the ngrok ingress"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 23"),": print your ngrok ingress url"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 24-26"),": start axum with the ngrok ingress"))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Save and close the file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Launch your tunnel replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"TOKEN")," with your Authtoken from above:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'NGROK_AUTHTOKEN="TOKEN" cargo r\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The terminal will display an ngrok URL."),(0,a.kt)("p",{parentName:"li"},"Access it to confirm you see the message ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello from ngrok-rust"),".\nYour Rust application is now live on the internet, with a public url that anyone in the world can access."))),(0,a.kt)("h2",{id:"add-edge-functionality-to-your-app"},"Add edge functionality to your app"),(0,a.kt)("p",null,"The ngrok-rust library provides functions and configuration for all features available in ngrok. Everything you can do with the ngrok agent is available using our library. In this example, you can modify main.rs to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 21"),": Use my-rust-app.ngrok.dev as a custom subdomain"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 22"),": Apply a circuit breaker if the Rust app returns errors over 50% of the time"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 23"),": Compress http responses"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Line 24"),": Deny requests from the CIDR range ",(0,a.kt)("inlineCode",{parentName:"li"},"200.2.0.0/16")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Lines 25-28"),": Use Google OAuth for authentication and allow access only from users with the email ",(0,a.kt)("inlineCode",{parentName:"li"},"@acme.com"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:"showLineNumbers",showLineNumbers:!0},'use axum::{routing::get, Router};\nuse ngrok::prelude::*;\nuse ngrok::config::*;\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    // build our application with a route\n    let app = Router::new().route("/", get(|| async { "Hello World!" }));\n\n    // listen on localhost:8000\n    // axum::Server::bind(&"0.0.0.0:8000".parse().unwrap())\n    //  .serve(app.into_make_service())\n    //  .await?;\n    // Ok(())\n\n    // listen on ngrok ingress (i.e. https://my-rust-app.ngrok.dev)\n    let listener = ngrok::Session::builder()\n        .authtoken_from_env()\n        .connect()\n        .await?\n        .http_endpoint()\n        .domain("my-rust-app.ngrok.dev")\n        .circuit_breaker(0.5)\n        .compression()\n        .deny_cidr("200.2.0.0/16")\n        .oauth(OauthOptions::new("google").allow_domain("acme.com"))\n        .listen()\n        .await?;\n    println!("Ingress URL: {:?}", listener.url());\n    axum::Server::builder(listener)\n        .serve(app.into_make_service())\n        .await?;\n    Ok(())\n}\n')),(0,a.kt)("p",null,"Launch the app just as you did before, again replacing TOKEN with our Authtoken:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'NGROK_AUTHTOKEN="TOKEN" cargo r\n')),(0,a.kt)("p",null,"You should have your Rust app served on the internet with OAuth authentication, circuit breaker, network restrictions, and a custom subdomain."))}d.isMDXComponent=!0}}]);