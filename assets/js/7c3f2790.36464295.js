"use strict";(self.webpackChunkngrok_doc=self.webpackChunkngrok_doc||[]).push([[89384],{81647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=t(51163),a=(t(59496),t(49613));const s={description:"Setup a local Consul Service mesh to demonstrate how to use the ngrok Ingress Controller with Consul."},r="Ingress to services in a Consul Service Mesh on Kubernetes",l={unversionedId:"integrations/consul/k8s",id:"integrations/consul/k8s",title:"Ingress to services in a Consul Service Mesh on Kubernetes",description:"Setup a local Consul Service mesh to demonstrate how to use the ngrok Ingress Controller with Consul.",source:"@site/docs/integrations/consul/k8s.md",sourceDirName:"integrations/consul",slug:"/integrations/consul/k8s",permalink:"/docs/integrations/consul/k8s",draft:!1,editUrl:"https://github.com/ngrok/ngrok-docs/edit/main/docs/integrations/consul/k8s.md",tags:[],version:"current",lastUpdatedBy:"Russ Savage",lastUpdatedAt:1693002758,formattedLastUpdatedAt:"Aug 25, 2023",frontMatter:{description:"Setup a local Consul Service mesh to demonstrate how to use the ngrok Ingress Controller with Consul."},sidebar:"docs",previous:{title:"Consul",permalink:"/docs/integrations/consul/"},next:{title:"Contentful",permalink:"/docs/integrations/contentful/"}},i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"<strong>Step 1</strong>: Set up a local Consul Service Mesh on Kubernetes",id:"set-up-a-consul-service-mesh-on-kubernetes",level:2},{value:"<strong>Step 2</strong>: Install the ngrok Ingress Controller",id:"install-the-ngrok-ingress-controller",level:2},{value:"<strong>Step 3</strong>: Install a Sample Application",id:"install-a-sample-application",level:2},{value:"<strong>Step 4</strong>: Configure Public Ingress for the sample application",id:"configure-public-ingress-for-the-sample-application",level:2},{value:"<strong>Step 5</strong>: Add OAuth Protection to the App",id:"add-oauth-protection-to-the-app",level:2}],p={toc:c},u="wrapper";function h(e){let{components:n,...s}=e;return(0,a.kt)(u,(0,o.Z)({},p,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ingress-to-services-in-a-consul-service-mesh-on-kubernetes"},"Ingress to services in a Consul Service Mesh on Kubernetes"),(0,a.kt)("hr",null),(0,a.kt)("admonition",{title:"TL;DR",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To use the ngrok Ingress Controller with Consul in a local demo environment:"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#set-up-a-consul-service-mesh-on-kubernetes"},"Set up a local Consul Service Mesh on Kubernetes")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#install-the-ngrok-ingress-controller"},"Install the ngrok Ingress Controller")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#install-a-sample-application"},"Install a sample application")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#configure-public-ingress-for-the-sample-application"},"Configure Public Ingress for the sample application")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#secure-the-app-with-oauth"},"Secure the app with OAuth")))),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ngrok/kubernetes-ingress-controller"},"ngrok Ingress Controller for Kubernetes")," is our official open-source controller for adding public and secure ingress traffic to your k8s services. It works on any cloud, local, or on-prem Kubernetes cluster to provide ingress to your services no matter the network configuration, as long as it has outbound access to the ngrok service. This allows ngrok to be portable and work seamlessly across any type of infrastructure."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/"},"Consul")," is a secure and resilient service mesh that provides service discovery, configuration, and segmentation functionality. Consul Connect provides service-to-service connection authorization and encryption using mutual TLS, automatically enabling TLS for all Connect services. Consul can be used with Kubernetes to provide a service mesh for your Kubernetes cluster."),(0,a.kt)("p",null,"Together, Consul provides a robust and secure way for Services within a cluster to communicate, while ngrok can seamlessly and securely provide public ingress to those services. This guide will walk you through setting up a Consul Service Mesh on Kubernetes and then using the ngrok Ingress Controller to provide ingress to your services to illustrate how they can work together."),(0,a.kt)("admonition",{title:"This tutorial requires:",type:"caution"},(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},"An ",(0,a.kt)("a",{parentName:"li",href:"https://ngrok.com/signup"},"ngrok account"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/install-kubectl/"},"kubectl")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm 3.0.0+")),(0,a.kt)("li",{parentName:"ol"},"A remote or local Kubernetes cluster with Consul installed ",(0,a.kt)("em",{parentName:"li"},"OR")," ",(0,a.kt)("a",{parentName:"li",href:"https://minikube.sigs.k8s.io/docs/start/"},"minikube")," to set up a demo cluster locally."))),(0,a.kt)("h2",{id:"set-up-a-consul-service-mesh-on-kubernetes"},(0,a.kt)("strong",{parentName:"h2"},"Step 1"),": Set up a local Consul Service Mesh on Kubernetes"),(0,a.kt)("p",null,"For this guide, we'll need access to a remote or local Kubernetes cluster with Consul installed. If you have an existing cluster with Consul set up, you can skip this step and proceed to ",(0,a.kt)("a",{parentName:"p",href:"#install-the-ngrok-ingress-controller"},"Step 2: Install the ngrok Ingress Controller"),"."),(0,a.kt)("p",null,"If you don't have one set up, we'll set up a local Minikube cluster and install Consul now."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a local cluster with minikube")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --profile dc1 --memory 4096 --kubernetes-version=v1.22.0\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a file called ",(0,a.kt)("inlineCode",{parentName:"li"},"values.yaml")," with the following contents:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Contains values that affect multiple components of the chart.\nglobal:\n  # The main enabled/disabled setting.\n  # If true, servers, clients, Consul DNS and the Consul UI will be enabled.\n  enabled: true\n  # The prefix used for all resources created in the Helm chart.\n  name: consul\n  # The name of the datacenter that the agents should register as.\n  datacenter: dc1\n  # Enables TLS across the cluster to verify authenticity of the Consul servers and clients.\n  tls:\n    enabled: true\n  # Enables ACLs across the cluster to secure access to data and APIs.\n  acls:\n    # If true, automatically manage ACL tokens and policies for all Consul components.\n    manageSystemACLs: true\n# Configures values that configure the Consul server cluster.\nserver:\n  enabled: true\n  # The number of server agents to run. This determines the fault tolerance of the cluster.\n  replicas: 1\n# Contains values that configure the Consul UI.\nui:\n  enabled: true\n  # Registers a Kubernetes Service for the Consul UI as a NodePort.\n  service:\n    type: NodePort\n# Configures and installs the automatic Consul Connect sidecar injector.\nconnectInject:\n  enabled: true\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install the Consul Helm chart")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'helm repo add hashicorp https://helm.releases.hashicorp.com\n\nhelm install --values values.yaml consul hashicorp/consul --create-namespace --namespace consul --version "1.0.0"\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Depending on your computer, this can take some time for the pods to become healthy. You can watch the status of the pods with ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"kubectl get pods --namespace consul -w")),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},"Verify Consul is installed and all its pods are healthy")),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods --namespace consul\nNAME                                           READY   STATUS    RESTARTS        AGE\nconsul-connect-injector-6f67d58f8d-2lw6l       1/1     Running   0               17m\nconsul-server-0                                1/1     Running   0               17m\nconsul-webhook-cert-manager-5bb6f965c8-pjqms   1/1     Running   0               17m\n")),(0,a.kt)("p",{parentName:"admonition"},"We now have a Kubernetes cluster with a Consul service mesh installed.")),(0,a.kt)("p",null,"These steps are based on Consul's Tutorial ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/tutorials/kubernetes/kubernetes-minikube"},"Consul Service Discovery and Service Mesh on Minikube"),"\n:::"),(0,a.kt)("h2",{id:"install-the-ngrok-ingress-controller"},(0,a.kt)("strong",{parentName:"h2"},"Step 2"),": Install the ngrok Ingress Controller"),(0,a.kt)("p",null,"Now that we have a Kubernetes cluster with Consul installed, we can install the ngrok Ingress Controller to provide ingress to our services. We'll use Helm to install the ngrok Ingress Controller into our cluster and use pod annotations to enable the Consul Connect sidecar injector. This will allow us to use Consul Connect to secure the traffic between the ngrok Ingress Controller and our services."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"First, we need to create a Kubernetes Service for the ngrok Ingress Controller. Consul relies on this to name our services to declare Service Intention ",(0,a.kt)("inlineCode",{parentName:"li"},"source")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"destination")," values. We'll create a Kubernetes Service for the ngrok Ingress Controller in the ",(0,a.kt)("inlineCode",{parentName:"li"},"consul")," namespace.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: ngrok-ingress-controller\n  namespace: consul\nspec:\n  ports:\n    - name: http\n      port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app.kubernetes.io/name: kubernetes-ingress-controller\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add the ngrok Ingress Controller Helm repo",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add ngrok https://ngrok.github.io/kubernetes-ingress-controller\n"))),(0,a.kt)("li",{parentName:"ol"},"Set your environment variables with your ngrok credentials. Replace ",(0,a.kt)("inlineCode",{parentName:"li"},"[AUTHTOKEN]")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"[API_KEY]")," with your Authtoken and API key for your account.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export NGROK_AUTHTOKEN=[AUTHTOKEN]\nexport NGROK_API_KEY=[API_KEY]\n"))),(0,a.kt)("li",{parentName:"ol"},"Install the ngrok Ingress Controller")),(0,a.kt)("p",null,"Next, we'll install the ngrok Ingress Controller into our cluster. We want the controller pods to be in the Consul service mesh in order to proxy traffic to our other services. We'll use pod annotations to enable the Consul Connect sidecar injector and allow outbound traffic to use the Consul mesh. Consul documents how to set these 2 annotations in the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/docs/k8s/connect/ingress-controllers"},"Configure Ingress Controllers for Consul on Kubernetes")," doc."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'```yaml\n# This annotation is required to enable the Consul Connect sidecar injector\nconsul.hashicorp.com/connect-inject: "true"\n# This is the CIDR of your Kubernetes API: `kubectl get svc kubernetes --output jsonpath=\'{.spec.clusterIP}\'\nconsul.hashicorp.com/transparent-proxy-exclude-outbound-cidrs: "10.96.0.1/32"\n```\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'helm install ngrok-ingress-controller ngrok/kubernetes-ingress-controller \\\n  --namespace consul \\\n  --set fullnameOverride=ngrok-ingress-controller \\\n  --set credentials.apiKey=$NGROK_API_KEY \\\n  --set credentials.authtoken=$NGROK_AUTHTOKEN \\\n  --set-string podAnnotations.consul\\\\.hashicorp\\\\.com/connect-inject=true \\\n  --set podAnnotations."consul\\.hashicorp\\.com/transparent-proxy-exclude-outbound-cidrs"="YOUR KUBERNETES API CIDR"\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"HashiCorp's docs also mention the annotation ",(0,a.kt)("inlineCode",{parentName:"li"},"consul.hashicorp.com/transparent-proxy-exclude-inbound-ports"),". This is not applicable to the ngrok Ingress Controller as we create an outbound connection for Ingress rather than exposing ports."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"--set-string")," flag allows the pod annotation to escape the ",(0,a.kt)("inlineCode",{parentName:"li"},".")," character in the annotation name while ensuring the value ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," is a boolean and not a string."),(0,a.kt)("li",{parentName:"ul"},"In a production environment, or anywhere you wish to use Infrastructure as Code and source control your Helm configurations, you can set up your credentials following this ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ngrok/kubernetes-ingress-controller/blob/main/docs/deployment-guide/credentials.md"},"guide"),"."))),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Verify the ngrok Ingress Controller is installed and all its pods are healthy")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -l 'app.kubernetes.io/name=kubernetes-ingress-controller' -n consul\nNAME                                                READY   STATUS    RESTARTS      AGE\nngrok-ingress-controller-manager-5b796c88f7-k7v6z   2/2     Running   1 (64s ago)   67s\n")),(0,a.kt)("h2",{id:"install-a-sample-application"},(0,a.kt)("strong",{parentName:"h2"},"Step 3"),": Install a Sample Application"),(0,a.kt)("p",null,"Now let's install a sample application to try out our service mesh and Ingress Controller combination. We'll use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hashicorp-demoapp"},"HashiCups Demo Application")," HashiCorp uses for demos and guides such as in their ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/tutorials/kubernetes-features/service-mesh-deploy"},"Getting Started with Consul Service Mesh for Kubernetes")," guide. This application is a simple e-commerce application that allows users to order coffee cups.\nThe application has a ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and public API services that are also backed by a private API and database. These communicate with each other through the Consul service mesh. This comes with nginx installed as a proxy for the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and Public API services. We'll replace this with ngrok to provide public access and other features."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"For this demo, everything will be installed in the ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"consul")," namespace."),(0,a.kt)("p",{parentName:"admonition"},"The ngrok Ingress Controller can send traffic to services across different namespaces, but ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions"},"Consul Service Intentions")," across namespaces ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions#sources-namespace"},"require an enterprise account"),". For now, we'll keep everything in the same namespace.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Clone the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/hashicorp/learn-consul-kubernetes"},"HashiCorp Learning Consul repo"),". This has multiple great example applications for learning about Consul and Kubernetes. We'll use the HashiCups application for this guide.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/hashicorp/learn-consul-kubernetes\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install the HashiCups sample app in the ",(0,a.kt)("inlineCode",{parentName:"li"},"consul")," namespace. This app consists of multiple Services and Deployments that make a tiered application. We'll install all of them from this folder and then modify things from there.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f learn-consul-kubernetes/service-mesh/deploy/hashicups -n consul\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Remove the existing ",(0,a.kt)("a",{parentName:"li",href:"https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions"},"Service Intentions")," for the ",(0,a.kt)("inlineCode",{parentName:"li"},"public-api")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"frontend")," services and add our own.")),(0,a.kt)("p",null,"Consul has the concept of ",(0,a.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/consul/docs/connect/config-entries/service-intentions"},"Service Intentions"),". In short, they are a programmatic way to configure the Consul Service mesh to allow or deny traffic between services."),(0,a.kt)("p",null,"HashiCups comes with ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx")," installed with intentions to the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," services. We'll remove these and add our own intentions to allow traffic from the ngrok Ingress Controller to the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," services."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl delete serviceintentions public-api -n consul\nkubectl delete serviceintentions frontend -n consul\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create Service Intention from ngrok to HashiCups and the public-api")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n  name: ngrok-consul-frontend\n  namespace: consul\nspec:\n  destination:\n    name: frontend\n  sources:\n    - action: allow\n      name: ngrok-ingress-controller\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n  name: ngrok-consul-api\n  namespace: consul\nspec:\n  sources:\n    - name: frontend\n      action: allow\n    - name: ngrok-ingress-controller\n      action: allow\n  destination:\n    name: public-api\n")),(0,a.kt)("h2",{id:"configure-public-ingress-for-the-sample-application"},(0,a.kt)("strong",{parentName:"h2"},"Step 4"),": Configure Public Ingress for the sample application"),(0,a.kt)("p",null,"Now that the ngrok Ingress Controller can communicate with the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," service and ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," service through the Consul Service Mesh via Service Intentions, we can create an ingress to route traffic to the app. We'll create ingress objects to route traffic to the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," service and the ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," service."),(0,a.kt)("admonition",{title:"Update This First!",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Update the line ",(0,a.kt)("inlineCode",{parentName:"p"},"host: $NGROK_DOMAIN_NAME")," in the ingress object below to your ngrok domain name. For a free account, select something unique that is a subdomain of ",(0,a.kt)("inlineCode",{parentName:"p"},"ngrok.app"),". For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"host: my-unique-hashicups.ngrok.app"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-consul\n  namespace: consul\nspec:\n  ingressClassName: ngrok\n  rules:\n    - host: $NGROK_DOMAIN_NAME\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: frontend\n                port:\n                  number: 3000\n          - path: /api\n            pathType: Prefix\n            backend:\n              service:\n                name: public-api\n                port:\n                  number: 8080\n")),(0,a.kt)("admonition",{title:"This ingress object:",type:"tip"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Uses the ",(0,a.kt)("inlineCode",{parentName:"li"},"ngrok")," ingress class"),(0,a.kt)("li",{parentName:"ul"},"The host is the ngrok domain name you selected that is static"),(0,a.kt)("li",{parentName:"ul"},"There is a route for ",(0,a.kt)("inlineCode",{parentName:"li"},"/")," that routes to the ",(0,a.kt)("inlineCode",{parentName:"li"},"frontend")," service on port ",(0,a.kt)("inlineCode",{parentName:"li"},"3000")),(0,a.kt)("li",{parentName:"ul"},"There is a route for ",(0,a.kt)("inlineCode",{parentName:"li"},"/api")," that routes to the ",(0,a.kt)("inlineCode",{parentName:"li"},"public-api")," service on port ",(0,a.kt)("inlineCode",{parentName:"li"},"8080")))),(0,a.kt)("p",null,"Open your ",(0,a.kt)("inlineCode",{parentName:"p"},"$NGROK_DOMAIN_NAME")," domain in your browser and see the HashiCups application!"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"HashiCups App",src:t(39647).Z,width:"3164",height:"2062"})),(0,a.kt)("h2",{id:"add-oauth-protection-to-the-app"},(0,a.kt)("strong",{parentName:"h2"},"Step 5"),": Add OAuth Protection to the App"),(0,a.kt)("p",null,"Now that we have the HashiCups application running, we can add OAuth protection to it. We'll use the OAuth module of the ngrok Ingress Controller to add OAuth protection to the app. This will allow us to use Google OAuth to protect the app."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create an ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ngrok/kubernetes-ingress-controller/blob/main/docs/user-guide/route-modules.md"},"NgrokModuleSet"))),(0,a.kt)("p",null,"The NgrokModuleSet is a custom resource that allows you to configure the modules of the ngrok Ingress Controller. We'll create one to configure the OAuth module. Create the following ",(0,a.kt)("inlineCode",{parentName:"p"},"NgrokModuleSet")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: NgrokModuleSet\napiVersion: ingress.k8s.ngrok.com/v1alpha1\nmetadata:\n  name: oauth-module\n  namespace: consul\nmodules:\n  oauth:\n    google:\n      emailAddresses:\n        # Replace with your email address\n        - my-email@my-domain.com\n      # Or specify a list of domains instead of individual email addresses\n      # emailDomains:\n      # - my-domain.com\n")),(0,a.kt)("admonition",{title:"Ngrok vs User Managed OAuth Application",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This example uses the ngrok Managed OAuth Application for simplicity. To use your own Managed OAuth Application, you can try ",(0,a.kt)("a",{parentName:"p",href:"https://ngrok.com/docs/cloud-edge/modules/oauth/google/"},"Creating a custom Google OAuth application")," or use an existing one.\nYou can then create a Kubernetes Secret with the ",(0,a.kt)("inlineCode",{parentName:"p"},"clientId")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"clientSecret")," and reference the secret in your module set like this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ngrok/kubernetes-ingress-controller/blob/main/docs/user-guide/route-modules.md#user-managed-oauth-application"},"example"),".")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add the module to the ingress")),(0,a.kt)("p",null,"Now that we have the module set created, we can add it to the ingress. We'll add an annotation to the ingress to add the module set to it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl annotate ingress ingress-consul k8s.ngrok.com/modules=oauth-module -n consul\n")),(0,a.kt)("p",null,"This applies the OAuth module to each route on our ingress object. Navigate to your HashiCups app at ",(0,a.kt)("inlineCode",{parentName:"p"},"$NGROK_DOMAIN_NAME")," and you'll see the Google OAuth screen."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Google OAuth Screen",src:t(7367).Z,width:"3164",height:"2062"})),(0,a.kt)("p",null,"Sign into your account and you'll be redirected to the HashiCups app! Now only you can order from HashiCups from anywhere!"))}h.isMDXComponent=!0},7367:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/google-oauth-1a66161dbaf4e717533ce51aa6784309.png"},39647:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/hashicups-b590b107d674b5051a90e3d8942c8eb7.png"}}]);